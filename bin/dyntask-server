#!/usr/bin/env ruby
require 'rubygems'
require 'filewatcher'
require 'trollop'
require 'pathname'
require 'thread'
require 'dyntask'

options = Trollop::options do
  version "dyntask-server based on filewatcher, version #{FileWatcher.VERSION} by Thomas Flemming 2015"
  banner <<-EOS
dyntask-server scans the filesystem and executes shell commands when files changes.
Usage:
   dyntask-server
Options:
EOS
  opt :dontwait, "Do not wait for filesystem updates before running", :short => 'd', :type => :boolean, :default => false
  #opt :restart, "Restart process when filesystem is updated", :short => 'r', :type => :boolean, :default => false
  opt :list, "Print name of files being watched"
  opt :interval, "Interval to scan filesystem.", :short => 'i', :type => :float, :default => 0.5
  opt :spinner, "Show an ascii spinner", :short => 's', :type => :boolean, :default => false
end

##Trollop::die Trollop::educate if(ARGV.size == 0)

rundirs=[DynTask.cfg_dir[:run]]
etc_rundirs=File.join( DynTask.cfg_dir[:etc],"rundirs")
rundirs += File.read(etc_rundirs).strip.split(",").map{|d| d.strip} if File.exists? etc_rundirs

##tasks_to_watch = DynTask::TaskMngr::TASKS

files_to_watch=[]
rundirs.each do |rundir|
  ##tasks_to_watch.each do |e|
  watchdir = rundir[-1,1] == File::Separator ? [rundir[0...-1],"**"] : rundir
  files_to_watch << File.join(watchdir,"*" +DynTask::TaskMngr::TASK_EXT+"*" ) ##+e) #if DynTask::TaskMngr::TASKS.include? file
  ##end
end

files_to_watch.uniq!

puts "Tasks watched: #{files_to_watch}"

begin

  ##p files
  fw = FileWatcher.new(files_to_watch, options[:list], options[:dontwait], options[:spinner])

  fw.watch(options[:interval]) do |filename, event|
    if([:changed,:new].include? event)
      path = Pathname.new(filename).realpath.to_s
      DynTask.read_tasks path
    end
  end

rescue SystemExit, Interrupt
  fw.finalize
end
