#!/usr/bin/env ruby
require 'rubygems'
require 'trollop'
require 'pathname'
require 'dyntask/task_mngr'
require 'fileutils'

VERSION='0.1.2'

options = Trollop::options do
  version "dyntask-init version #{VERSION}"
  banner <<-EOS
dyntask-init executes the dynamic task file.
Usage:
   dyntask-init [--force] '<name>' '<working_dir>:<list_of_comma_separated_tasks>' ['<working_dir_2>:<list_of_comma_separated_tasks_2>' ...]
   dyntask-init '<name>'
   dyntask-init --force --rm '<name>'
Options:
EOS
  opt :force, "force is used to rewrite on an existing file", :short => 'f', :type => :boolean, :default => false
  opt :rm, "remove an existing file", :type => :boolean, :default => false
end

Trollop::die Trollop::educate if(ARGV.size == 0)

if ARGV[0] == "pandoc-extra"
	case ARGV[1]
	when "ls"
		if File.directory? DynTask.cfg_pandoc[:extra_dir]
		    puts `/usr/bin/env bash -c 'ls #{DynTask.cfg_pandoc[:extra_dir]}'`
    end
	when "dir"
		if options[:force] and options[:rm]
			FileUtils.rm(DynTask.cfg_pandoc[:extra_etc])
		elsif ARGV[2] and (File.directory? ARGV[2] or options[:force])
			File.open(DynTask.cfg_pandoc[:extra_etc],"w") do |f|
				f << ARGV[2]
			end
		end
		puts "Config file #{DynTask.cfg_pandoc[:extra_etc]} is "+ ( (File.exist? DynTask.cfg_pandoc[:extra_etc]) ? "" : "not ") +"created."
		puts "Current pandoc extra installations are located at #{DynTask.cfg_pandoc(true)[:extra_dir]}, "+((File.exist? DynTask.cfg_pandoc[:extra_dir]) ? "an " : "a non-") +"existing directory."

	when "wget"
		## Stuff!
		p [:extra_dir,DynTask.cfg_pandoc[:extra_dir]]
		FileUtils.mkdir_p DynTask.cfg_pandoc[:extra_dir]
		curdir=Dir.pwd
    Dir.chdir DynTask.cfg_pandoc[:extra_dir]
    version="3.2.0"
    puts "Installing reveal-js-#{version}"
    system("curl --insecure -L -o revealjs.tgz http://github.com/hakimel/reveal.js/archive/#{version}.tar.gz && tar xzvf revealjs.tgz && rm revealjs.tgz")
    puts "Installing s5-11"
    system("curl -o s5.zip http://meyerweb.com/eric/tools/s5/v/1.1/s5-11.zip && mkdir -p s5-tmp && unzip -d s5-tmp s5.zip && mv s5-tmp/ui s5-ui && rm s5.zip && rm -fr s5-tmp")
    Dir.chdir curdir

	end
	exit
end



if ARGV.size == 1 and ARGV[0]=="ls"
	Dir[File.join(DynTask.cfg_dir[:etc],"tasks","**/*")].each do |f|
		puts "#{File.basename(f)}: #{File.read(f)}"
	end
	exit
end

etc_tasks=File.join(DynTask.cfg_dir[:etc],"tasks",ARGV[0])

if ARGV.size==1
	if options[:rm] and options[:force]
		require 'fileutils'
		FileUtils.rm etc_tasks
	end
else
	if File.exists? etc_tasks and !options[:force]
		puts "Error: file #{etc_tasks} already exist. Use --force or -f to modify this file!"
		exit
	else
		require 'fileutils'
		FileUtils.mkdir_p File.dirname(etc_tasks)
		dyntask_tasks=ARGV[1..-1].join(" ")
		File.open(etc_tasks,"w") do |f|
			f << dyntask_tasks
		end
	end
end

puts "#{etc_tasks} contains: #{File.read(etc_tasks)}" if File.exists? etc_tasks
