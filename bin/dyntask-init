#!/usr/bin/env ruby
require 'rubygems'
require 'trollop'
require 'pathname'
require 'dyntask/task_mngr'
require 'fileutils'

VERSION='0.1.2'

options = Trollop::options do
  version "dyntask-init version #{VERSION}"
  banner <<-EOS
dyntask-init executes the dynamic task file.
Usage:
  dyntask-init [first] (for a initial setup)
  dyntask-init ls or dyntask-init add|rm <working_dir> (to list, add or remove working directory)
  dyntask-init pandoc-extra ls|dir|wget
Options:
EOS
  opt :force, "force is used to rewrite on an existing file", :short => 'f', :type => :boolean, :default => false
  opt :rm, "remove an existing file", :type => :boolean, :default => false
end

## Trollop::die Trollop::educate if(ARGV.size == 0)

case ARGV[0] || "first"
when "first"
  FileUtils.mkdir_p DynTask.cfg_dir[:root] unless File.directory? DynTask.cfg_dir[:root]
  FileUtils.mkdir_p DynTask.cfg_dir[:run] unless File.directory? DynTask.cfg_dir[:run]
  FileUtils.cp_r File.expand_path('../../share',__FILE__),DynTask.cfg_dir[:share] unless File.directory? File.join(DynTask.cfg_dir[:share])
when "rundir","run"
  rundirs=[]
  etc_rundirs=File.join( DynTask.cfg_dir[:etc],"rundirs")
  rundirs += File.read(etc_rundirs).strip.split(",").map{|d| d.strip} if File.exists? etc_rundirs
  etc_rundirs_to_update=false
  case ARGV[1]
  when "ls"
    puts "Additional directories watched: #{rundirs.empty? ? 'none' : rundirs.join(',')}"
  when "add"
    newdir=File.expand_path ARGV[2]
    if File.directory? newdir and !rundirs.include? newdir
      rundirs << newdir
      puts "DynTask Server needs to be restarted to apply this change!"
      etc_rundirs_to_update=true
    else
      "Nothing to do!"
    end
  when "rm"
    newdir=File.expand_path ARGV[2]
    if File.directory? newdir and rundirs.include? newdir
      rundirs -= [newdir]
      puts "DynTask Server needs to be restarted to apply this change!"
      etc_rundirs_to_update=true
    else
      "Nothing to do!"
    end
  end
  if etc_rundirs_to_update
    if rundirs.empty?
      File.unlink etc_rundirs
    else
      File.open(etc_rundirs,"w") do |f|
        f << rundirs.join(",")
      end
    end
  end
when "pandoc-extra"
	case ARGV[1]
	when "ls"
		if File.directory? DynTask.cfg_pandoc[:extra_dir]
		    puts `/usr/bin/env bash -c 'ls #{DynTask.cfg_pandoc[:extra_dir]}'`
    end
	when "dir"
		if options[:force] and options[:rm]
			FileUtils.rm(DynTask.cfg_pandoc[:extra_etc])
		elsif ARGV[2] and (File.directory? ARGV[2] or options[:force])
			File.open(DynTask.cfg_pandoc[:extra_etc],"w") do |f|
				f << ARGV[2]
			end
		end
		puts "Config file #{DynTask.cfg_pandoc[:extra_etc]} is "+ ( (File.exist? DynTask.cfg_pandoc[:extra_etc]) ? "" : "not ") +"created."
		puts "Current pandoc extra installations are located at #{DynTask.cfg_pandoc(true)[:extra_dir]}, "+((File.exist? DynTask.cfg_pandoc[:extra_dir]) ? "an " : "a non-") +"existing directory."

	when "wget"
		## Stuff!
		p [:extra_dir,DynTask.cfg_pandoc[:extra_dir]]
		FileUtils.mkdir_p DynTask.cfg_pandoc[:extra_dir]
		curdir=Dir.pwd
    Dir.chdir DynTask.cfg_pandoc[:extra_dir]
    version="3.2.0"
    puts "Installing reveal-js-#{version}"
    system("curl --insecure -L -o revealjs.tgz http://github.com/hakimel/reveal.js/archive/#{version}.tar.gz && tar xzvf revealjs.tgz && rm revealjs.tgz")
    puts "Installing s5-11"
    system("curl -o s5.zip http://meyerweb.com/eric/tools/s5/v/1.1/s5-11.zip && mkdir -p s5-tmp && unzip -d s5-tmp s5.zip && mv s5-tmp/ui s5-ui && rm s5.zip && rm -fr s5-tmp")
    Dir.chdir curdir

	end
	exit
end
